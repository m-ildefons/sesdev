set -ex

# curl is needed to download the k3s and helm installers
# the helm installer needs openssl to do checksum verification
zypper --non-interactive install curl openssl nfs-client open-iscsi e2fsprogs
systemctl enable iscsid
systemctl start iscsid

# need this to pick up kubectl, helm etc. which are installed to /usr/local/bin
export PATH=$PATH:/usr/local/bin

{% if k3s_version %}
export INSTALL_K3S_VERSION={{ k3s_version }}
{% endif %}


{% if node.name == "master1" %}

# Lifted from seslib/templates/caasp/master.sh.j2
function wait_for_master1_ready {
    set +ex
    echo "Waiting for master to be ready"
    timeout_seconds="900"
    remaining_seconds="$timeout_seconds"
    interval_seconds="10"
    while true ; do
        set -x
        ACTUAL_NUMBER_OF_MASTERS="$(kubectl get nodes 2>/dev/null | egrep -c "master1\s+Ready")"
        set +x
        echo "masters in cluster (actual/expected): $ACTUAL_NUMBER_OF_MASTERS/1 (${remaining_seconds} seconds to timeout)"
        remaining_seconds="$(( remaining_seconds - interval_seconds ))"
        [ "$ACTUAL_NUMBER_OF_MASTERS" = "1" ] && break
        if [ "$remaining_seconds" -le "0" ] ; then
            echo "It seems unlikely that a master will ever appear. Bailing out!"
            set -e
            false
        fi
        sleep "$interval_seconds"
    done
    set -ex
}

# Also lifted from seslib/templates/caasp/master.sh.j2, except for the
# ACTUAL_NUMBER_O_F_WORKERS= line, which checked for "worker[0-9]+\s+Ready",
# but that won't do because the nodes are named "node[0-9]", not "worker[0-9]"
function wait_for_workers_ready {
    set +ex
    echo "Waiting for {{ worker_nodes }} workers to be ready"
    timeout_seconds="900"
    remaining_seconds="$timeout_seconds"
    interval_seconds="10"
    while true ; do
        set -x
        ACTUAL_NUMBER_OF_WORKERS="$(kubectl get nodes 2>/dev/null | egrep -c "worker[0-9]+\s+Ready")"
        set +x
        echo "workers in cluster (actual/expected): $ACTUAL_NUMBER_OF_WORKERS/{{ worker_nodes }} (${remaining_seconds} seconds to timeout)"
        remaining_seconds="$(( remaining_seconds - interval_seconds ))"
        [ "$ACTUAL_NUMBER_OF_WORKERS" = "{{ worker_nodes }}" ] && break
        if [ "$remaining_seconds" -le "0" ] ; then
            echo "It seems unlikely that {{ worker_nodes }} workers will ever appear. Bailing out!"
            set -e
            false
        fi
        sleep "$interval_seconds"
    done
    set -ex
}

curl -sfL https://get.k3s.io | K3S_TOKEN=sesdev K3S_KUBECONFIG_MODE="644" sh -s - server --cluster-init

# Unfortunately we can't use `kubectl wait --for=condition=Ready node/{{ master.name }} --timeout 15m`
# because this runs before the master node even exists, and so we get
# 'Error from server (NotFound): nodes "master" not found'
wait_for_master1_ready

wait_for_workers_ready

# Helm seems generally useful, let's install it
curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
helm version

# This sets KUBECONFIG for everyone to the global k3s config.
# Without this, helm will try to talk to http://localhost:8080/version
# by default, which of course won't work.
echo "export KUBECONFIG=/etc/rancher/k3s/k3s.yaml" >> /etc/profile.local

# The earlier addition of KUBECONFIG to /etc/profile.local won't help
# us in this current session, so also need to set it explicitly here.
export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

{% if k3s_deploy_ses %}

mkdir -p ~/cluster
cd ~/cluster
helm pull oci://registry.suse.com/ses/7.1/charts/rook-ceph
# Currently rook-ceph-1.10.1.tgz
# TODO: can we ask helm for the name of the file?  Or just assume it's
# the only file currently in the directory?
tar -xzf rook-ceph-*.tgz

kubectl create namespace rook-ceph

helm install -n rook-ceph rook-ceph ./rook-ceph/

echo "Waiting for the rook operator"
kubectl wait --timeout=5m --namespace rook-ceph --for=condition=Ready pod  -l "app=rook-ceph-operator"

echo "Let rook take all nodes that aren't the master"
kubectl label node -l 'node-role.kubernetes.io/master!=true' node-role.rook-ceph/cluster=any

echo "Creating ceph cluster..."
kubectl create -f rook-ceph/examples/cluster.yaml

# The above will take some time (maybe 20 minutes in my testing),
# so let's not wait for it :-)

echo "Creating toolbox container..."
kubectl create -f rook-ceph/examples/toolbox.yaml

{% endif %} {# k3s_deploy_ses #}

{% if k3s_deploy_longhorn %}

# Make longhorn create default disks on all nodes that aren't the master
kubectl label node -l 'node-role.kubernetes.io/master!=true' node.longhorn.io/create-default-disk=true
kubectl label node -l 'node-role.kubernetes.io/master=true' node.longhorn.io/create-default-disk=true

mkdir ~/longhorn
cd ~/longhorn
git clone https://github.com/longhorn/longhorn.git
cd longhorn

{% if longhorn_version %}
git checkout {{longhorn_version}}
{% endif %} {# longhorn_version #}

helm install longhorn ./chart \
    --namespace longhorn-system \
    --create-namespace

{% endif %} {# k3s_deploy_longhorn #}

{% else %} {# node == master1 #}

function get_k3s_token {
    set +ex
    echo "Waiting for K3S token from master1"
    timeout_seconds="900"
    remaining_seconds="$timeout_seconds"
    interval_seconds="30"
    while true ; do
        remaining_seconds="$(( remaining_seconds - interval_seconds ))"
        if scp master1:/var/lib/rancher/k3s/server/node-token /tmp/k3s_token 2>/dev/null ; then
            # Got the node token, probably (when exactly does that token get created
            # on the master? could we conceivably have a weird race where we get an
            # empty token file here?)
            break
        fi
        if [ "$remaining_seconds" -le "0" ] ; then
            echo "It seems unlikely that a master will ever appear. Bailing out!"
            set -e
            false
        fi
        echo "waiting for k3s token (${remaining_seconds} seconds to timeout)"
        sleep "$interval_seconds"
    done
    set -ex
}

get_k3s_token
# export K3S_TOKEN=$(cat /tmp/k3s_token)
rm /tmp/k3s_token

{% if node.has_role('master') %}
curl -sfL https://get.k3s.io | K3S_TOKEN=sesdev K3S_URL=https://master1:6443 sh -s - server
{% else %} {# node.has_role('master') #}
curl -sfL https://get.k3s.io | K3S_TOKEN=sesdev K3S_URL=https://master1:6443 sh -s - agent
{% endif %} {# node.has_role('master') #}

{% if k3s_deploy_longhorn %}
if [ ! -b /dev/vdb ]; then
    echo "WARNING: Longhorn deployments should have at least one additional disk"
else
    mkfs.ext4 /dev/vdb
    mkdir /var/lib/longhorn
    echo "/dev/vdb /var/lib/longhorn ext4 defaults 0 2" >> /etc/fstab
    mount /var/lib/longhorn
fi
{% endif %} {# k3s_deploy_longhorn #}

{% endif %}
